/*
For the given Integer N print all its all prime factor.
Example: N = 4, prime factors of  is 2, 2
*/
#include <bits/stdc++.h>
using namespace std;
void printAllPrimeFactors(int N){
	//Print number of 2s that divide N.
	while(N%2==0){
		cout<<2<<" ";
		N/= 2;
	}
	//N must be odd at this point. 
	for(int i = 3;i<sqrt(N);i+= 2){
		while(N%i ==0){
			cout<<i<<" ";
			N/= i;
		}
		
	}
	//When is prime and it is greater than 2
	if(N>2){
		cout<<N<<" ";
	}
}
//Time Complexity: O(sqrt(N))
//Space complexity: O(1)
/*// Efficient Approach Seive eratosthenes to find all prime factor of given number 

#define MAXN 100001
 
// stores smallest prime factor for every number
int spf[MAXN];
 
// Calculating SPF (Smallest Prime Factor) for every
// number till MAXN.
// Time Complexity : O(nloglogn)
void sieve()
{
	spf[1] = 1;
	for (int i = 2; i < MAXN; i++)
 
		// marking smallest prime factor for every
		// number to be itself.
		spf[i] = i;
 
	// separately marking spf for every even
	// number as 2
	for (int i = 4; i < MAXN; i += 2)
		spf[i] = 2;
 
	for (int i = 3; i * i < MAXN; i++) {
		// checking if i is prime
		if (spf[i] == i) {
			// marking SPF for all numbers divisible by i
			for (int j = i * i; j < MAXN; j += i)
 
				// marking spf[j] if it is not
				// previously marked
				if (spf[j] == j)
					spf[j] = i;
		}
	}
}
 
// A O(log n) function returning primefactorization
// by dividing by smallest prime factor at every step
vector<int> getFactorization(int x)
{
	vector<int> ret;
	while (x != 1) {
		ret.push_back(spf[x]);
		x = x / spf[x];
	}
	return ret;
}
*/

int main() {
	int N;
	cin>>N;
	printAllPrimeFactors(N);
	return 0;
}